/*! github.com/BYODKM/legacy-gradient.styl | MIT License */

normalizeStart(start)
	if start is a 'color'
		unshift(colors, start)
		start = top
	start

normalizeColors(colors)
	colors = clone(colors)
	for color, index in colors
		if length(color) is 1
			value = color[0]
			color[0] = justifyStops(colors, index)
			color[1] = value
		else if typeof(color[1]) is 'unit'
			unit = color[1]
			color[1] = color[0]
			color[0] = unit
	colors

justifyStops(colors, index)
	len = length(colors) - 1
	if len is index
		100%
	else if index
		unit(index / len * 100, '%')
	else
		0%

webkitStart(start)
	if length(start) is 1
		return left start if start in (top bottom)
		return start top if start in (left right)
	else if start[0] in (top bottom)
		return start[1] start[0]

joinColors(colors, applySyntax)
	s = ''
	for color, index in colors
		s += ', ' if index isnt 0
		position = color[0]
		s += applySyntax(color[1], position)
	unquote(s)

applyWebkit(color, position)
	'color-stop(%d, %s)' % (position/100 color)

applySpec(color, position)
	'%s %s' % (color position)

linear-gradient(start, colors...)

	start = normalizeStart(start)
	colors = normalizeColors(colors)

	color-start = webkitStart(start)
	color-end = webkitStart(opposite-position(start))
	color-stops = joinColors(colors, applyWebkit)
	legacy-syntax = '-webkit-gradient(linear, %s, %s, %s)' % (color-start color-end color-stops)
	add-property(current-property[0], legacy-syntax)

	colors = joinColors(colors, applySpec)
	'linear-gradient(%s, %s)' % (start colors)
