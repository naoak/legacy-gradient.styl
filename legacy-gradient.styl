/* github.com/BYODKM/legacy-gradient.styl | MIT License */

normalizeStart(start, colors)
	if start is a 'color'
		unshift(colors, start)
		start = top
	else if start[0] == 'to'
		shift(start)
		start = opposite-position(start)
	start

normalizeColors(colors)
	for color, index in colors
		if length(color) is 1
			value = color[0]
			color[0] = justifyStops(colors, index)
			color[1] = value
		else if typeof(color[1]) is 'unit'
			unit = color[1]
			color[1] = color[0]
			color[0] = unit
	colors

justifyStops(colors, index)
	len = length(colors) - 1
	if len is index
		100%
	else if index
		unit(index / len * 100, '%')
	else
		0%

webkitStart(start)
	if length(start) is 1
		return left start if start in (top bottom)
		return start top if start in (left right)
	else if start[0] in (top bottom)
		return start[1] start[0]
	else
		return start

checkColors(colors)
	for color in colors
		position = color[0]
		if unit(position) == 'px'
			return false
	true

joinColors(colors, applySyntax)
	s = ''
	for color, index in colors
		s += ', ' if index isnt 0
		position = color[0]
		s += applySyntax(color[1], position)
	unquote(s)

applyWebkit(color, position)
	// remove percent
	pos = '%d' % (position/100)
	// avoid conversion of hsla to rgba
	'color-stop(' + pos + ', ' + color + ')'

replace(expr, str, val)
	expr = clone(expr)
	for e, i in expr
		if length(e) > 1
			expr[i] = replace(e, str, val)
		else
			if str == e
				expr[i] = val
	expr

removeFill(literals)
	result = ()
	for lit in literals
		if lit != 'fill'
			push(result, lit)
	result

linear-gradient(start, colors...)
	if current-property
		start = clone(start)
		colors = clone(colors)
		start = normalizeStart(start, colors)
		colors = normalizeColors(colors)
		if typeof(start) != 'unit'
			color-start = webkitStart(start)
			color-end = webkitStart(opposite-position(start))
			if checkColors(colors)
				color-stops = joinColors(colors, applyWebkit)
				legacy-syntax = '-webkit-gradient(linear, %s, %s, %s)' % (color-start color-end color-stops)
				prop = current-property[0]
				value = replace(current-property[1], '__CALL__', legacy-syntax)
				if prop == 'border-image'
					add-property('-webkit-border-image', removeFill(value))
				else if prop == 'background' || prop == 'background-image'
					add-property(prop, value)
				else
					warn('-webkit-gradient does not support ' + prop)
			else
				warn("-webkit-gradient does not support pixel position.")
		else
			warn("-webkit-gradient does not support angle.")
	else
		warn("-webkit-gradient does not support variable.")

	unquote('linear-gradient(' + join(', ',arguments) + ')')
